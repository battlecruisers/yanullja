# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  contents: read
  pull-requests: write

jobs:
  build-client:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: cd to client
        run: cd ./client
      - uses: actions/setup-node@v4
        name: Use Node.js {{ matrix.node-version }}
        with:
          node-version: $ {{ matrix.node-version }}
      - name: Install
        run: npm install
      - name: Build
        run: npm run build
      - name: Lint
        run: npm run lint
      
    
  build-server:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: yanullja
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Create an env.properties file
        run: |
          cd ./server
          echo "${{secrets.ENV_PROPERTIES}}" > ./src/main/resources/env.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
      - name: Run build with Gradle Wrapper
        run: cd ./server && ./gradlew build --stacktrace
  deploy:
    needs: [build-client, build-server]
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            cd ~/yanullja
            git checkout main
            git pull
            cd ~/yanullja/client
            lsof -i tcp:3000 | awk 'NR!=1 {print $2}' | xargs kill -9
            npm install
            nohup npm run dev > client.log 2>&1 &
            cd ~/yanullja/server
            lsof -i tcp:8080 | awk 'NR!=1 {print $2}' | xargs kill -9
            nohup ./gradlew bootRun > application.log 2>&1 &
